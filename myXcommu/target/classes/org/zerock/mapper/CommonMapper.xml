<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.zerock.mapper.CommonMapper">


	<select id="getRegiUserInfor" resultType="org.zerock.domain.MemberVO" parameterType="String">
		<!-- select * from tbl_member where userid = #{userId} -->
		select 
		    a.*,
		    b.auth
		from 
		    tbl_member a
		inner join
		    tbl_member_auth b
		on
		    a.userid = b.userid
		where
		    a.userid = #{userId}
	</select>
	
	
	
	<select id="selectRecommandQuestionUserRecord" resultType="Integer" parameterType="java.util.HashMap">
		select 
			count(*)
		from
			tbl_board_recommand
		where
			board_type = #{type}
			and board_seq = #{seq}
			and recommand_user = #{user}
	</select>
	
	<select id="getBoardReplyList" resultType="org.zerock.domain.BoardReplyDTO" parameterType="java.util.HashMap">
		<!-- select 
			*
		from
			tbl_board_reply
		where
			board_type = #{type}
			and board_seq = #{seq}
		order by
    		regdate ASC -->
    		
    		select
			    a.*,
			    nvl(b.empathy_yes ,0) as empathy_yes,
			    nvl(b.empathy_no, 0) as empathy_no
			from
			    tbl_board_reply a
			left outer join
			(
			    select
			            a.reply_seq,
			            a.cnt as empathy_yes,
			            b.cnt as empathy_no
			        from        
			        (
			        select
			            a.reply_seq,
			            nvl(b.cnt,0) as cnt
			        from
			            tbl_reply_empathy a
			        left outer join
			        (
			        select
			            reply_seq,
			            count(*) as cnt
			        from
			            tbl_reply_empathy
			        where  
			            empathy_xy = 1
			        group by
			            reply_seq
			        ) b
			        on
			            a.reply_seq = b.reply_seq
			        group by
			            a.reply_seq, cnt
			        ) a
			        left outer join
			        (
			        select
			            a.reply_seq,
			            nvl(b.cnt,0) as cnt
			        from
			            tbl_reply_empathy a
			        left outer join
			        (
			        select
			            reply_seq,
			            count(*) as cnt
			        from
			            tbl_reply_empathy
			        where  
			            empathy_xy = 2
			        group by
			            reply_seq
			        ) b
			        on
			            a.reply_seq = b.reply_seq
			        group by
			            a.reply_seq, cnt
			        ) b
			        on
			            a.reply_seq = b.reply_seq
			) b
			on
			    a.reply_seq = b.reply_seq
			where
						board_type = #{type}
						and board_seq = #{seq}
			    
			order by
			    		regdate ASC
	</select>
	
	<select id="getAllSearchReport" resultType="org.zerock.domain.SearchBoardDTO" parameterType="String">
		select
	    board_seq,
	    subject,
	    REGEXP_REPLACE(content,
	    	<![CDATA[
	    		'<[^>]*>|\&([^;])*;', '')
	    	]]> as content,
	    writer,
	    regdate,
	    view_cnt,
	    board_type
	from
	
	(
	
	select 
	    notice_seq as board_seq, subject, content, writer, regdate, view_cnt , '5' as board_type
	from
	    tbl_notice_board
	union all
	    select
	        proposal_seq, subject, content, writer, regdate, view_cnt, '4'
	    from
	        tbl_proposal_board
	union all
	    select
	        qna_board_seq, subject, content, writer, regdate ,view_cnt, '2'
	    from
	        tbl_question_board
	union all
		select
	        picture_seq, subject, content, writer, regdate, view_cnt, '3'
	    from
	        tbl_picture_board
	)
	where
	    subject like 
	    	'%'||#{word}||'%'
	    	or content like 
	    		'%'||#{word}||'%'
	order by 
   		 regdate desc		
	
	</select>
	
	
	
	
	<select id="countEmpathyRecordToUser" resultType="Integer" parameterType="java.util.HashMap">
		select 
			count(*)
		from
			tbl_reply_empathy
		where
			reply_seq = #{reply_seq}
			and recommand_user = #{recommand_user}
			and board_type = #{board_type}
	</select>
	
	<select id="checkReportCount" parameterType="java.util.HashMap" resultType="Integer">
		select
			count(*)
		from
			tbl_board_report 
		where
			board_type = #{boardType} 
			and board_seq = #{boardSeq}
			and board_reporter = #{boardReporter}
	</select>
	
	<!-- 차후에 recommandBoard로 바꿀수도 있을꺼임 -->
	<insert id="recommandBoard" parameterType="java.util.HashMap">
		insert into tbl_board_recommand values
			( #{type} , #{seq} , #{user} )
	</insert>
	
	
	
	<insert id="registerReply" parameterType="java.util.HashMap">
		insert into tbl_board_reply
			( board_type, board_seq, replyer, reply, reply_seq )
		values ( #{board_type}, #{board_seq}, #{replyer}, #{reply}, reply_seq.nextval )
	</insert>
	
	
	
	<insert id="empathyReply" parameterType="java.util.HashMap">
		insert into tbl_reply_empathy values
			( #{board_type}, #{board_seq}, #{reply_seq}, #{recommand_user}, #{empathy_type} )
	</insert>
	
	<insert id="insertReportBoard" parameterType="java.util.HashMap">
		insert into tbl_board_report
			( board_type, board_seq, board_writer, board_reporter, reportType )
		 values
			( #{boardType},  #{boardSeq}, #{writer}, #{boardReporter}, #{reportType}  )
	</insert>
	
	<insert id="insertBoardDBLog" parameterType="java.util.HashMap">
		insert into tbl_user_log
			( division, writer, board_type, board_seq, board_subject, board_content )
		values
			( 'board', #{writer}, #{board_type}, #{seq}, #{subject}, #{content} )
	</insert>
	
	<insert id="insertReplyDBLog" parameterType="java.util.HashMap">
		insert into tbl_user_log
			( division, writer, board_type, board_seq, reply_seq, reply_content )
		values
			( 'reply', #{replyer}, #{board_type}, #{board_seq}, reply_seq.CURRVAL, #{reply} )
	</insert>
 	 
	 <update id="updateViewCnt" parameterType="java.util.HashMap">
	 
		 <if test="boardType eq '2'.toString()">
			update tbl_question_board
				set
					view_cnt = view_cnt + 1
				where
					qna_board_seq = #{boardSeq}
		</if>
		
		<if test="boardType eq '3'.toString()">
			update tbl_picture_board
				set
					view_cnt = view_cnt + 1
				where
					picture_seq = #{boardSeq}
		</if>
		
		<if test="boardType eq '4'.toString()">
			update tbl_proposal_board
				set
					view_cnt = view_cnt + 1
				where
					proposal_seq = #{boardSeq}
		</if>
		
		<if test="boardType eq '5'.toString()">
			update tbl_notice_board
				set
					view_cnt = view_cnt + 1
				where
					notice_seq = #{boardSeq}
		</if>
		
		<if test="boardType eq '6'.toString()">
			update tbl_free_board
				set
					view_cnt = view_cnt + 1
				where
					free_board_seq = #{boardSeq}
		</if>
		
	 </update>
	 
	 <update id="updateBoardStatus" parameterType="java.util.HashMap">
	 	<if test="boardType eq '2'.toString()">
			update tbl_question_board
				set
					status = 'Y'
				where
					qna_board_seq = #{seq}
		</if>
		
	 	<if test="boardType eq '4'.toString()">
			update tbl_proposal_board
				set
					status = 'Y'
				where
					proposal_seq = #{seq}
		</if>
	</update>
		
	<delete id="deleteBoard" parameterType="java.util.HashMap">
	
		<if test="type eq '2'.toString()">
			delete tbl_question_board
				where
					qna_board_seq = #{seq}
		</if>
		
		<if test="type eq '3'.toString()">
			delete tbl_picture_board
				where
					picture_seq = #{seq}
		</if>
		
		<if test="type eq '4'.toString()">
			delete tbl_proposal_board
				where
					proposal_seq = #{seq}
		</if>
		
		<if test="type eq '5'.toString()">
			delete tbl_notice_board
				where
					notice_seq = #{seq}
		</if>
		
		<if test="type eq '6'.toString()">
			delete tbl_free_board
				where
					free_board_seq = #{seq}
		</if>
		
	</delete>
	
	
	
	<delete id="deleteBoardAllReply" parameterType="java.util.HashMap">
			delete tbl_board_reply
				where
					board_type = #{type}
					and board_seq = #{seq}
				
	</delete>
	
	<delete id="deleteBoardReplyRecord" parameterType="java.util.HashMap">
			delete tbl_board_recommand
				where
					board_type = #{type}
					and board_seq = #{seq}
		
	</delete>
	
	<!-- 차후에 여기에 board_Type 명시해야할지 생각좀.. deleteReplyEmpathy도 마찬가지 -->
	<delete id="deleteReply" parameterType="Integer">
		delete tbl_board_reply
			where
				reply_seq = #{seq}
	</delete>
	
	<delete id="deleteReplyEmpthy" parameterType="Integer">
		delete tbl_reply_empathy
			where
				reply_seq = #{seq}
	</delete>
	
</mapper>