<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.zerock.mapper.AccountMapper">

	<select id="getAccountInformation" parameterType="String" resultType="org.zerock.domain.MemberVO">
		select 
		    a.*,
		    b.auth
		from 
		    tbl_member a
		left outer join
		    tbl_member_auth b
		on
		    a.userid = b.userid
		where
		    a.userid = #{userId}
	</select>
	
	<select id="getAccountInformationByEmail" parameterType="String" resultType="org.zerock.domain.MemberVO">
		select * from tbl_member where email = #{email}
	</select>
	
	<select id="getRecentlyUserLog" parameterType="String" resultType="org.zerock.domain.UserLogDTO">
		select
			division,
			writer,
			board_type,
			board_seq,
			board_subject,
			 REGEXP_REPLACE(board_content,
	    	<![CDATA[
	    		'<[^>]*>|\&([^;])*;', '')
	    	]]> as board_content,
	    	reply_seq,
	    	reply_content,
	    	regdate
		from 
			tbl_user_log 
		where 
			writer = #{userId}
		order by 
			regdate asc
	</select>
	
	<select id="getBoardUserReplyCnt" resultType="org.zerock.domain.StatisticsDTO">
		select 
		    *
		from 
		    ( select count(*) as member_cnt from tbl_member ),
		    ( select count(*) as board_cnt  from tbl_user_log where division = 'board' ),
		    ( select count(*) as reply_cnt  from tbl_user_log where division = 'reply' )
	</select>
	
	<select id="getAllMemberStats" resultType="org.zerock.domain.MemberStatsDTO">
		select
		    a.userid, 
		    a.regdate, 
		    a.updatedate, 
		    a.user_level,
		    a.login_count,
		    a.email,
		    a.report_status,
		    nvl( b.board_cnt, 0 ) as board_cnt,
		    nvl( c.reply_cnt, 0 ) as reply_cnt
		from
		    tbl_member a
		left outer join
		    ( select 
		        writer,  count(*) as board_cnt
		    from 
		        tbl_user_log
		    where
		        division = 'board'
		    group by
		        writer ) b
		on 
		    a.userid = b.writer
		left outer join
		   (  select 
		            writer,  count(*) as reply_cnt
		        from 
		            tbl_user_log
		        where
		            division = 'reply'
		        group by
		            writer ) c
		on
		    a.userid = c.writer
	</select>
	
	<select id="getWriteBoardReplyCount" parameterType="String" resultType="org.zerock.domain.MemberStatsDTO">
		select 
		    *
		from   
		(
		
		select 
		    count(*) as board_cnt
		from 
		    tbl_user_log 
		where
		    writer = #{userId}
		    and division = 'board'
		        ), 
		        (
		
		select 
		    count(*) as reply_cnt
		from 
		    tbl_user_log 
		where
		    writer = #{userId}
		    and division = 'reply'
		        )
	</select>
	
	<select id="findUserIdEmail" parameterType="String" resultType="org.zerock.domain.MemberVO">
		select 
			* 
		from 
			tbl_member 
		where 
			email = #{email}
	</select>
	
	<select id="findPWAccount" parameterType="java.util.HashMap" resultType="org.zerock.domain.MemberVO">
		select 
			* 
		from 
			tbl_member 
		where 
			email = #{email}
			and userid = #{userId}
	</select>
	
	<select id="checkPwAccount" parameterType="String" resultType="String">
		select userpw from tbl_member where userid = #{userid}
	</select>
	

	<insert id="registerAccount">
		insert into tbl_member
			( userid, userpw, email, profile_image, profile_info, email_code ) values( #{userid}, #{userpw}, #{email}, #{profile_image}, #{profile_info}, #{email_code} )
	</insert>
	
	<insert id="registerAuth">
		insert into tbl_member_auth
			( userid, auth ) values( #{userid}, 'ROLE_USER')
	</insert>
	
	
	<update id="updateProfile" parameterType="org.zerock.domain.MemberVO">
		update tbl_member
			set
				profile_info = #{profile_info}
				<if test="profile_image != ''">
				,profile_image = #{profile_image}
 				</if>				
			where
				userid = #{userid}
	</update>
	
	<update id="updateEmailValid" parameterType="java.util.HashMap">
		update tbl_member
			set
				email_check_valid = '2'
			where
				userid = #{userid}
				and email_code = #{validCode}
	</update>
	
	<update id="findPwTemp" parameterType="java.util.HashMap">
		update tbl_member
			set
				userpw = #{userPw}
			where
				userid = #{userId}
	</update>
	
	
</mapper>